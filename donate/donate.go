package donate

import (
	"fmt"
	"os"
	"weightTrack_bot/backup"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skip2/go-qrcode"
)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –≤ –≤–∏–¥–µ []byte
func generateQRCode(content string) ([]byte, error) {
	qr, err := qrcode.Encode(content, qrcode.Medium, 256)
	if err != nil {
		msg := fmt.Sprintf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ %v", err)
		backup.WriteLog(msg)
		return nil, err
	}
	return qr, nil
}

// –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–Ω–∞—Ç–∞
func DoDonate(sum float64, chatID int64) tgbotapi.PhotoConfig {

	donateLink := os.Getenv("TELEGRAM_BOT_DONATE")
	// –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥
	qrCode, err := generateQRCode(donateLink)
	if err != nil {
		msg := fmt.Sprintf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ %v", err)
		backup.WriteLog(msg)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –≤ —á–∞—Ç
	file := tgbotapi.FileBytes{Name: "qrcode.png", Bytes: qrCode}
	photo := tgbotapi.NewPhoto(chatID, file)
	photo.Caption = fmt.Sprintf("üîπ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ **%.2f ‚ÇΩ**\nüîπ –ù–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞\n\n–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: %s", sum, donateLink)
	photo.ParseMode = "Markdown"

	return photo
}
